<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>并发笔记 - ofcoder.com</title>
  
  <subtitle>一位后端开发的养肝历程，护发经验</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.ofcoder.com/"/>
  <updated>2021-07-29T13:14:39.232Z</updated>
  <id>https://www.ofcoder.com/</id>
  
  <author>
    <name>far.liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PaddleOCR - PaddleServing部署</title>
    <link href="https://www.ofcoder.com/2021/07/29/machinelearn/PaddleOCR-PaddleServing%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.ofcoder.com/2021/07/29/machinelearn/PaddleOCR-PaddleServing%E9%83%A8%E7%BD%B2/</id>
    <published>2021-07-29T15:31:39.000Z</published>
    <updated>2021-07-29T13:14:39.232Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;PaddleOCR&quot;&gt;&lt;a href=&quot;#PaddleOCR&quot; class=&quot;headerlink&quot; title=&quot;PaddleOCR&quot;&gt;&lt;/a&gt;PaddleOCR&lt;/h3&gt;&lt;p&gt;PaddleOCR提供2种服务部署方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于PaddleHub Serving的部署：代码路径为”./deploy/hubserving”，按照本教程使用；&lt;ul&gt;
&lt;li&gt;deploy: &lt;a href=&quot;https://github.com/PaddlePaddle/PaddleOCR/tree/release/2.1/deploy/hubserving&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/PaddlePaddle/PaddleOCR/tree/release/2.1/deploy/hubserving&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(简单，用于多客户端)
        
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://www.ofcoder.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="干货" scheme="https://www.ofcoder.com/tags/%E5%B9%B2%E8%B4%A7/"/>
    
      <category term="PaddleOCR" scheme="https://www.ofcoder.com/tags/PaddleOCR/"/>
    
      <category term="OCR" scheme="https://www.ofcoder.com/tags/OCR/"/>
    
      <category term="Paddle" scheme="https://www.ofcoder.com/tags/Paddle/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务之Seata常见异常</title>
    <link href="https://www.ofcoder.com/2021/06/23/java/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B9%8BSeata%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/"/>
    <id>https://www.ofcoder.com/2021/06/23/java/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B9%8BSeata%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</id>
    <published>2021-06-23T12:57:30.000Z</published>
    <updated>2021-12-25T04:04:34.890Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;关于log-status-1的记录&quot;&gt;&lt;a href=&quot;#关于log-status-1的记录&quot; class=&quot;headerlink&quot; title=&quot;关于log_status=1的记录&quot;&gt;&lt;/a&gt;关于log_status=1的记录&lt;/h3&gt;&lt;p&gt;网上都说是防悬挂，具体是指啥又没说清楚。这里先说结论：这个条记录，你可以不用管它。&lt;/p&gt;
&lt;p&gt;防悬挂，因为网络延迟或者第一阶段请求丢包，导致第二阶段的回滚请求，先到RM，RM此时没有处理第一阶段请求，没有记录undo_log，所以插入该记录，作为一个防御性的操作，阻止后到的第一阶段请求继续执行。&lt;/p&gt;
&lt;p&gt;产生的另一个原因是，请检查项目中是否为多数据源。如果是，需要把seata自动代理关了，一般多数据源都是有开发者已经手动代理了。二阶段的时候，下发找datasource，找到的不是你业务操作数据库的datasource，导致没发现undolog，就插了一条status=1。&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
    
      <category term="踩坑日记" scheme="https://www.ofcoder.com/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="干货" scheme="https://www.ofcoder.com/tags/%E5%B9%B2%E8%B4%A7/"/>
    
      <category term="maven" scheme="https://www.ofcoder.com/tags/maven/"/>
    
      <category term="HTTPS" scheme="https://www.ofcoder.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>SQL生成随机字符串</title>
    <link href="https://www.ofcoder.com/2021/04/11/sql/SQL%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://www.ofcoder.com/2021/04/11/sql/SQL%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-04-11T12:57:30.000Z</published>
    <updated>2021-12-25T04:09:56.845Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;生成随机数字&quot;&gt;&lt;a href=&quot;#生成随机数字&quot; class=&quot;headerlink&quot; title=&quot;生成随机数字&quot;&gt;&lt;/a&gt;生成随机数字&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CONCAT&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;FLOOR&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;RAND&lt;/span&gt;()*&lt;span class=&quot;number&quot;&gt;500000000000000000&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;500000000000000000&lt;/span&gt;)
        
      
    
    </summary>
    
    
      <category term="芝士点心" scheme="https://www.ofcoder.com/categories/%E8%8A%9D%E5%A3%AB%E7%82%B9%E5%BF%83/"/>
    
    
      <category term="SQL" scheme="https://www.ofcoder.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性协议 - 温故知新</title>
    <link href="https://www.ofcoder.com/2021/01/26/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/"/>
    <id>https://www.ofcoder.com/2021/01/26/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/</id>
    <published>2021-01-26T12:35:38.000Z</published>
    <updated>2021-01-26T15:10:48.227Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;Paxos&quot;&gt;&lt;a href=&quot;#Paxos&quot; class=&quot;headerlink&quot; title=&quot;Paxos&quot;&gt;&lt;/a&gt;Paxos&lt;/h3&gt;&lt;h4 id=&quot;关注的点&quot;&gt;&lt;a href=&quot;#关注的点&quot; class=&quot;headerlink&quot; title=&quot;关注的点&quot;&gt;&lt;/a&gt;关注的点&lt;/h4&gt;&lt;p&gt;选取提案的规则：&lt;/p&gt;
&lt;p&gt;如果acceptor通过提案[M,
        
      
    
    </summary>
    
    
      <category term="算法理论" scheme="https://www.ofcoder.com/categories/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式事务" scheme="https://www.ofcoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="ZAB" scheme="https://www.ofcoder.com/tags/ZAB/"/>
    
      <category term="paxos" scheme="https://www.ofcoder.com/tags/paxos/"/>
    
      <category term="Raft" scheme="https://www.ofcoder.com/tags/Raft/"/>
    
  </entry>
  
  <entry>
    <title>Centos</title>
    <link href="https://www.ofcoder.com/2021/01/20/centos/Centos/"/>
    <id>https://www.ofcoder.com/2021/01/20/centos/Centos/</id>
    <published>2021-01-20T12:57:30.000Z</published>
    <updated>2021-12-25T04:10:29.328Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;kill一组进程&quot;&gt;&lt;a href=&quot;#kill一组进程&quot; class=&quot;headerlink&quot; title=&quot;kill一组进程&quot;&gt;&lt;/a&gt;kill一组进程&lt;/h3&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ps&lt;/span&gt; -ef|&lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;python&lt;/span&gt;|&lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; -v &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt;|cut -&lt;span class=&quot;keyword&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;-&lt;span
        
      
    
    </summary>
    
    
      <category term="centos" scheme="https://www.ofcoder.com/categories/centos/"/>
    
    
      <category term="linux" scheme="https://www.ofcoder.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性协议 - EPaxos</title>
    <link href="https://www.ofcoder.com/2020/12/21/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20EPaxos/"/>
    <id>https://www.ofcoder.com/2020/12/21/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20EPaxos/</id>
    <published>2020-12-21T14:29:26.000Z</published>
    <updated>2021-01-07T12:59:25.535Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="算法理论" scheme="https://www.ofcoder.com/categories/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式事务" scheme="https://www.ofcoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="paxos" scheme="https://www.ofcoder.com/tags/paxos/"/>
    
  </entry>
  
  <entry>
    <title>ControllerAdvice拦截Filter抛出的异常</title>
    <link href="https://www.ofcoder.com/2020/12/10/java/ControllerAdvice%E6%8B%A6%E6%88%AAFilter%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8/"/>
    <id>https://www.ofcoder.com/2020/12/10/java/ControllerAdvice%E6%8B%A6%E6%88%AAFilter%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8/</id>
    <published>2020-12-10T12:57:30.000Z</published>
    <updated>2021-12-25T04:18:43.044Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;场景还原&quot;&gt;&lt;a href=&quot;#场景还原&quot; class=&quot;headerlink&quot; title=&quot;场景还原&quot;&gt;&lt;/a&gt;场景还原&lt;/h3&gt;&lt;p&gt;@ControllerAdvice在spring中用于全局的异常拦截和处理。Filter则过滤请求，多用于请求鉴权。它们之间的关系如下：&lt;br&gt;&lt;img src=&quot;/images/java/exception_handle_filter_1.png&quot; alt=&quot;filter,controller关系&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为spring设计原因，Filter和Interceptor中抛出的异常，@ControllerAdvice则捕获不到，自然也就处理不了。&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;手动注入HandlerExceptionResolver对象，调用resolveException()，自己处理异常。&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
      <category term="踩坑日记" scheme="https://www.ofcoder.com/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Filter" scheme="https://www.ofcoder.com/tags/Filter/"/>
    
      <category term="异常" scheme="https://www.ofcoder.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性协议 - Gossip</title>
    <link href="https://www.ofcoder.com/2020/11/24/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20Gossip/"/>
    <id>https://www.ofcoder.com/2020/11/24/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20Gossip/</id>
    <published>2020-11-24T11:50:11.000Z</published>
    <updated>2020-11-30T15:15:20.783Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;前面我们讲过CAP定理、Paxos、Raft，那么试想几个场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们要实现一个完全的AP系统。即集群中只有一个节点存活，也能向外提供服务。在此基础上，我们如何保证数据最终一致性？&lt;/li&gt;
&lt;li&gt;在一个庞大的集群中，对某个数据修改后，如何同步到其他节点？&lt;/li&gt;
&lt;li&gt;在一个去中心化的集群中，各节点都是对等节点。如何同步数据，使保证各节点数据达到一致？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;答案就是gossip协议，gossip是一种去中心化的分布式协议，用于实现节点之间的信息交换，大名鼎鼎的bitcoin也使用了gossip来传播交易和区块信息。在分布式系统中，也用它来实现最终一致性，比如cassandra、redis。&lt;/p&gt;
&lt;h3 id=&quot;六度分隔理论&quot;&gt;&lt;a href=&quot;#六度分隔理论&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="算法理论" scheme="https://www.ofcoder.com/categories/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式事务" scheme="https://www.ofcoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="gossip" scheme="https://www.ofcoder.com/tags/gossip/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性协议 - CAP、BASE、NWR</title>
    <link href="https://www.ofcoder.com/2020/11/07/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20CAP%E3%80%81BASE%E3%80%81NWR/"/>
    <id>https://www.ofcoder.com/2020/11/07/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20CAP%E3%80%81BASE%E3%80%81NWR/</id>
    <published>2020-11-06T16:00:12.000Z</published>
    <updated>2020-11-16T12:02:31.399Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这篇文章&lt;strong&gt;着重点不在于科普&lt;/strong&gt;，毕竟关于CAP、BASE的理论的文章，网上很多。所以本文科普篇幅尽量小（只包含概念描述）。主要从几个侧面的问题来描述CAP，进而描述ACID、BASE理念。然后加入一点点调料，如何动态的切换一致性强度。&lt;/p&gt;
&lt;p&gt;本文通过以下几个问题，从侧面描述。文中个人观点较多，看官理性对待。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么CAP三者不可兼得？&lt;/li&gt;
&lt;li&gt;为什么总把ACID与CP、BASE与AP放在一起，它们有什么关联？&lt;/li&gt;
&lt;li&gt;eureka属于AP系统吗？它明明没有放弃一致性啊？&lt;/li&gt;
&lt;li&gt;不考虑一致性的系统，有什么存在的意义呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CAP定理科普&quot;&gt;&lt;a href=&quot;#CAP定理科普&quot; class=&quot;headerlink&quot; title=&quot;CAP定理科普&quot;&gt;&lt;/a&gt;CAP定理科普&lt;/h3&gt;&lt;p&gt;CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition
        
      
    
    </summary>
    
    
      <category term="算法理论" scheme="https://www.ofcoder.com/categories/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式事务" scheme="https://www.ofcoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="CAP" scheme="https://www.ofcoder.com/tags/CAP/"/>
    
      <category term="BASE" scheme="https://www.ofcoder.com/tags/BASE/"/>
    
      <category term="NWR" scheme="https://www.ofcoder.com/tags/NWR/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性协议 - Raft</title>
    <link href="https://www.ofcoder.com/2020/10/31/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20Raft/"/>
    <id>https://www.ofcoder.com/2020/10/31/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20Raft/</id>
    <published>2020-10-31T03:05:16.000Z</published>
    <updated>2020-11-26T12:21:20.678Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;学习raft之前，给大家推荐一个网站，这个网站动画描述raft运行过程。在看文章时对照该网站，可以帮助更好的理解raft。&lt;br&gt;&lt;a href=&quot;http://thesecretlivesofdata.com/raft/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://thesecretlivesofdata.com/raft/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相比于paxos，我们更应掌握raft。raft作为现在分布式系统首选的共识算法。zookeeper、cubby、oceanbase等系统都是在raft诞生之前开发的，所以都是使用了paxos或者对其进行改进。而后来的大多系统都选择了raft，比如consul、etcd等。&lt;/p&gt;
&lt;p&gt;raft相比paxos的优点是:容易理解，容易实现。之所以说容易，是因为raft流程清晰、关键处给出了伪代码描述。相反，可真正用于工程实现的multi-paxos，lamport宗师只提出了个大概。&lt;/p&gt;
&lt;h3 id=&quot;Raft术语科普以及总结&quot;&gt;&lt;a href=&quot;#Raft术语科普以及总结&quot;
        
      
    
    </summary>
    
    
      <category term="算法理论" scheme="https://www.ofcoder.com/categories/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式事务" scheme="https://www.ofcoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="Raft" scheme="https://www.ofcoder.com/tags/Raft/"/>
    
  </entry>
  
  <entry>
    <title>深入理解jvm03 - 垃圾收集器与内存分配策略</title>
    <link href="https://www.ofcoder.com/2020/09/22/java/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm03%20-%20%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/"/>
    <id>https://www.ofcoder.com/2020/09/22/java/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm03%20-%20%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</id>
    <published>2020-09-22T13:45:58.000Z</published>
    <updated>2020-10-15T14:33:35.764Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本系列博客为《深入理解Java虚拟机 - JVM高级特性与最佳实践》读书笔记。本书大量干货，适合初学jvm的人员，也适合为应付面试人员，比较推荐的一本书。本系列只为记录书中精髓，方便查阅与记忆。如有错误，欢迎指出 O(∩_∩)O &lt;/p&gt;
&lt;p&gt;基于书中第二章总结，程序计数器、java虚拟机栈、本地方法栈随线程的生命周期创建和销毁，自然不用过多的考虑进行垃圾回收。而java堆、方法区则不一样，这一块的分配和回收是动态的，那本章的内容也是基于这两块的内容。&lt;/p&gt;
&lt;h3 id=&quot;对象已死吗？&quot;&gt;&lt;a href=&quot;#对象已死吗？&quot; class=&quot;headerlink&quot; title=&quot;对象已死吗？&quot;&gt;&lt;/a&gt;对象已死吗？&lt;/h3&gt;&lt;p&gt;垃圾回收第一步就是要确定那些对象可回收（已死），那些不可回收（活着）。书中介绍两种算法来确定对象是否存活&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用计数法&lt;/li&gt;
&lt;li&gt;可达性分析法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;引用计数法&quot;&gt;&lt;a href=&quot;#引用计数法&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://www.ofcoder.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://www.ofcoder.com/tags/jvm/"/>
    
      <category term="垃圾回收" scheme="https://www.ofcoder.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>深入理解jvm02 - java内存区域与内存泄露异常</title>
    <link href="https://www.ofcoder.com/2020/09/05/java/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm02%20-%20java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%BC%82%E5%B8%B8/"/>
    <id>https://www.ofcoder.com/2020/09/05/java/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm02%20-%20java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%BC%82%E5%B8%B8/</id>
    <published>2020-09-05T13:45:58.000Z</published>
    <updated>2020-09-06T15:35:27.431Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本系列博客为《深入理解Java虚拟机 - JVM高级特性与最佳实践》读书笔记。本书大量干货，适合初学jvm的人员，也适合为应付面试人员，比较推荐的一本书。本系列只为记录书中精髓，方便查阅与记忆。如有错误，欢迎指出 O(∩_∩)O &lt;/p&gt;
&lt;h3 id=&quot;运行时数据区域&quot;&gt;&lt;a href=&quot;#运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;运行时数据区域&quot;&gt;&lt;/a&gt;运行时数据区域&lt;/h3&gt;&lt;p&gt;在启动java程序时，我们会给jvm分配指定的内存大小。而jvm则对该部分内存划分为若干区域。其中有的区域以来用户线程的启动和结束而建立和销毁，有的区域随jvm进程的启动而存在。&lt;br&gt;&lt;img src=&quot;/images/java/jvm/understanding_jvm_02_1.png&quot;
        
      
    
    </summary>
    
    
      <category term="jvm" scheme="https://www.ofcoder.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://www.ofcoder.com/tags/jvm/"/>
    
      <category term="内存泄露" scheme="https://www.ofcoder.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性协议 - ZAB</title>
    <link href="https://www.ofcoder.com/2020/08/12/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20ZAB/"/>
    <id>https://www.ofcoder.com/2020/08/12/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20ZAB/</id>
    <published>2020-08-12T14:45:01.000Z</published>
    <updated>2021-01-26T15:09:32.318Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;ZAB-背景&quot;&gt;&lt;a href=&quot;#ZAB-背景&quot; class=&quot;headerlink&quot; title=&quot;ZAB 背景&quot;&gt;&lt;/a&gt;ZAB 背景&lt;/h3&gt;&lt;p&gt;学习ZAB，非常有必要聊聊它诞生的背景。因为在paxos的光芒下，还有必要折腾这样类似的算法吗？这个问题是我们初步了解ZAB关键。&lt;/p&gt;
&lt;p&gt;看到这里，我断定大家都使用过zookeeper，并且知道zookeeper的核心就是ZAB协议。如果没有的话，需要先学习下zookeeper。毕竟基础不牢，地动山摇。&lt;/p&gt;
&lt;p&gt;这里多提一句，ZAB的作者说ZAB不是paxos，但是后面我们又把ZAB归纳为paxos。这里我认为啊，这两个说法都对，只是他们描述的时间不一致。在ZAB诞生的时候，它解决了paxos不能保证顺序执行的问题，从某些角度来说ZAB是要paxos优秀的，说它不是paxos也没问题。但是后来随来越来越多分布式算法诞生，例如raft，因为他们都类似paxos执行逻辑，所以将这类算法归纳为paxos的变种。&lt;/p&gt;
&lt;h4 id=&quot;为何不使用paxos来实现zookeeper&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="算法理论" scheme="https://www.ofcoder.com/categories/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式事务" scheme="https://www.ofcoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="ZAB" scheme="https://www.ofcoder.com/tags/ZAB/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性协议 - Paxos</title>
    <link href="https://www.ofcoder.com/2020/07/07/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20Paxos/"/>
    <id>https://www.ofcoder.com/2020/07/07/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%20Paxos/</id>
    <published>2020-07-07T14:45:01.000Z</published>
    <updated>2021-01-26T13:19:28.611Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;paxos-科普&quot;&gt;&lt;a href=&quot;#paxos-科普&quot; class=&quot;headerlink&quot; title=&quot;paxos 科普&quot;&gt;&lt;/a&gt;paxos
        
      
    
    </summary>
    
    
      <category term="算法理论" scheme="https://www.ofcoder.com/categories/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式事务" scheme="https://www.ofcoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="paxos" scheme="https://www.ofcoder.com/tags/paxos/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性协议 - 2PC, 3PC</title>
    <link href="https://www.ofcoder.com/2020/07/05/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%202PC,%203PC/"/>
    <id>https://www.ofcoder.com/2020/07/05/theory/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%20-%202PC,%203PC/</id>
    <published>2020-07-05T14:45:01.000Z</published>
    <updated>2021-02-04T15:01:49.774Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在分布式系统中，每一个机器节点虽然都能明确的知道自己在事务操作中的结果是成功或失败，但无法直接获取其他节点的操作结果。因此在分布式环境中，为了保持事务的ACID特性，就需要增加一个“协调者”来管理其他节点（“参与者”）事务的提交和回滚。基于这个思想，衍生出二阶段提交和三阶段提交两种协议。&lt;/p&gt;
&lt;h3 id=&quot;2PC-简述&quot;&gt;&lt;a href=&quot;#2PC-简述&quot; class=&quot;headerlink&quot; title=&quot;2PC 简述&quot;&gt;&lt;/a&gt;2PC 简述&lt;/h3&gt;&lt;p&gt;二阶段提交(Two-Phase Commit)，是一个非常经典的&lt;strong&gt;强一致&lt;/strong&gt;、&lt;strong&gt;中心化的原子提交协议&lt;/strong&gt;。目前，绝大多数关系型数据库都采用二阶段提交协议来完成分布式事务处理（例如mysql的XA协议）。因此二阶段提交协议也被广泛运用到分布式系统中。&lt;/p&gt;
&lt;p&gt;顾名思义，算法流程就是分为两个阶段提交某一操作，其分为准备阶段、提交阶段。为了更好描述算法过程，为此定义了两种角色：协调者（Coordinator）、参与者（Participant）。&lt;/p&gt;
&lt;h4
        
      
    
    </summary>
    
    
      <category term="算法理论" scheme="https://www.ofcoder.com/categories/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式事务" scheme="https://www.ofcoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="2PC" scheme="https://www.ofcoder.com/tags/2PC/"/>
    
      <category term="3PC" scheme="https://www.ofcoder.com/tags/3PC/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务之实现分布式系统的最终一致性</title>
    <link href="https://www.ofcoder.com/2020/05/20/java/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B9%8B%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <id>https://www.ofcoder.com/2020/05/20/java/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B9%8B%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/</id>
    <published>2020-05-20T12:57:30.000Z</published>
    <updated>2021-12-25T04:35:20.229Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;转载自： &lt;a href=&quot;https://www.cnblogs.com/wudimanong/p/10558710.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/wudimanong/p/10558710.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h3&gt;&lt;p&gt;在之前的文章中我们介绍了如何基于RocketMQ搭建生产级消息集群，以及2PC、3PC和TCC等与分布式事务相关的基本概念（没有读过的读者详见👇推荐阅读）。在这篇文章中我们将介绍RocketMQ的事务消息相关的内容，并通过一些实践和大家一起来探索下事务消息如何解决分布式系统中的分布式事务问题。&lt;/p&gt;
&lt;h3 id=&quot;事务消息原理&quot;&gt;&lt;a href=&quot;#事务消息原理&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="芝士点心" scheme="https://www.ofcoder.com/categories/%E8%8A%9D%E5%A3%AB%E7%82%B9%E5%BF%83/"/>
    
    
      <category term="分布式事务" scheme="https://www.ofcoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="RocketMQ" scheme="https://www.ofcoder.com/tags/RocketMQ/"/>
    
      <category term="最终一致性" scheme="https://www.ofcoder.com/tags/%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>maven依赖本地jar包</title>
    <link href="https://www.ofcoder.com/2020/03/14/java/maven%E4%BE%9D%E8%B5%96%E6%9C%AC%E5%9C%B0jar%E5%8C%85/"/>
    <id>https://www.ofcoder.com/2020/03/14/java/maven%E4%BE%9D%E8%B5%96%E6%9C%AC%E5%9C%B0jar%E5%8C%85/</id>
    <published>2020-03-14T12:57:30.000Z</published>
    <updated>2021-12-25T04:41:41.790Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;项目情况&quot;&gt;&lt;a href=&quot;#项目情况&quot; class=&quot;headerlink&quot; title=&quot;项目情况&quot;&gt;&lt;/a&gt;项目情况&lt;/h3&gt;&lt;p&gt;没有搭建私仓，多模块依赖的父子模块（工程），需要依赖提供商提供的jar包。期望：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在需要依赖该模块的模块下依赖，不将该jar影响其他模块&lt;/li&gt;
&lt;li&gt;打包简单，在其他同事启动项目是不要手动处理这个jar包。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文介绍三种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打包时，将jar移至BOOT-INF&lt;/li&gt;
&lt;li&gt;打包时，将jar安装至本地仓库&lt;/li&gt;
&lt;li&gt;创建一个不同的本地仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;将jar移至BOOT-INF&quot;&gt;&lt;a href=&quot;#将jar移至BOOT-INF&quot; class=&quot;headerlink&quot; title=&quot;将jar移至BOOT-INF&quot;&gt;&lt;/a&gt;将jar移至BOOT-INF&lt;/h3&gt;&lt;h4 id=&quot;实现方案&quot;&gt;&lt;a href=&quot;#实现方案&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="芝士点心" scheme="https://www.ofcoder.com/categories/%E8%8A%9D%E5%A3%AB%E7%82%B9%E5%BF%83/"/>
    
    
      <category term="干货" scheme="https://www.ofcoder.com/tags/%E5%B9%B2%E8%B4%A7/"/>
    
      <category term="maven" scheme="https://www.ofcoder.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>位运算-linux权限管理</title>
    <link href="https://www.ofcoder.com/2020/03/12/java/%E4%BD%8D%E8%BF%90%E7%AE%97-linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>https://www.ofcoder.com/2020/03/12/java/%E4%BD%8D%E8%BF%90%E7%AE%97-linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</id>
    <published>2020-03-12T12:57:30.000Z</published>
    <updated>2021-12-25T04:58:01.095Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;Linux基于位运算的权限控制&quot;&gt;&lt;a href=&quot;#Linux基于位运算的权限控制&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="芝士点心" scheme="https://www.ofcoder.com/categories/%E8%8A%9D%E5%A3%AB%E7%82%B9%E5%BF%83/"/>
    
    
      <category term="linux" scheme="https://www.ofcoder.com/tags/linux/"/>
    
      <category term="位运算" scheme="https://www.ofcoder.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>埋点-淘宝SPM流量跟踪体系</title>
    <link href="https://www.ofcoder.com/2020/03/09/java/%E5%9F%8B%E7%82%B9-%E6%B7%98%E5%AE%9DSPM%E6%B5%81%E9%87%8F%E8%B7%9F%E8%B8%AA%E4%BD%93%E7%B3%BB/"/>
    <id>https://www.ofcoder.com/2020/03/09/java/%E5%9F%8B%E7%82%B9-%E6%B7%98%E5%AE%9DSPM%E6%B5%81%E9%87%8F%E8%B7%9F%E8%B8%AA%E4%BD%93%E7%B3%BB/</id>
    <published>2020-03-09T12:57:30.000Z</published>
    <updated>2021-12-25T05:06:04.327Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本文转载：&lt;a href=&quot;https://www.biaodianfu.com/spm.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.biaodianfu.com/spm.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是SPM&quot;&gt;&lt;a href=&quot;#什么是SPM&quot; class=&quot;headerlink&quot; title=&quot;什么是SPM&quot;&gt;&lt;/a&gt;什么是SPM&lt;/h3&gt;&lt;p&gt;SPM是淘宝社区电商业务（xTao）为外部合作伙伴（外站）提供的一套跟踪引导成交效果数据的解决方案。下面是一个跟踪点击到宝贝详情页的引导成交效果数据的SPM示例：&lt;a href=&quot;http://detail.tmall.com/item.htm?id=3716461318&amp;amp;&amp;amp;spm=2014.123456789.1.2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://detail.tmall.com/item.htm?id=3716461318&amp;amp;&amp;amp;spm=2014.123456789.1.2&lt;/a&gt;
        
      
    
    </summary>
    
    
      <category term="芝士点心" scheme="https://www.ofcoder.com/categories/%E8%8A%9D%E5%A3%AB%E7%82%B9%E5%BF%83/"/>
    
    
      <category term="埋点" scheme="https://www.ofcoder.com/tags/%E5%9F%8B%E7%82%B9/"/>
    
      <category term="SPM" scheme="https://www.ofcoder.com/tags/SPM/"/>
    
      <category term="行为分析" scheme="https://www.ofcoder.com/tags/%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>dubbo番外篇-bug之【aop失效】</title>
    <link href="https://www.ofcoder.com/2020/01/07/java/dubbo%E7%95%AA%E5%A4%96%E7%AF%87-bug%E4%B9%8B%E3%80%90aop%E5%A4%B1%E6%95%88%E3%80%91/"/>
    <id>https://www.ofcoder.com/2020/01/07/java/dubbo%E7%95%AA%E5%A4%96%E7%AF%87-bug%E4%B9%8B%E3%80%90aop%E5%A4%B1%E6%95%88%E3%80%91/</id>
    <published>2020-01-07T12:57:30.000Z</published>
    <updated>2021-12-25T05:12:31.931Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本文浅述：在使用dubbo时，spring aop失效问题。如果你也遇到该问题，先检查是否使用@Reference注入dubbo服务的。&lt;/p&gt;
&lt;h3 id=&quot;场景还原&quot;&gt;&lt;a href=&quot;#场景还原&quot; class=&quot;headerlink&quot; title=&quot;场景还原&quot;&gt;&lt;/a&gt;场景还原&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;版本&lt;/strong&gt;：我使用的dubbo版本是2.6.&lt;br&gt;&lt;strong&gt;场景&lt;/strong&gt;：我想消费者在调用我的dubbo接口时，都将自己应用名传过来，方便我鉴权，所以我在我提供的二方包中，提供aop，想通过dubbo的附加参数，将应用名传过来。大致代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
      <category term="源码狂想" scheme="https://www.ofcoder.com/categories/%E6%BA%90%E7%A0%81%E7%8B%82%E6%83%B3/"/>
    
    
      <category term="干货" scheme="https://www.ofcoder.com/tags/%E5%B9%B2%E8%B4%A7/"/>
    
      <category term="dubbo" scheme="https://www.ofcoder.com/tags/dubbo/"/>
    
      <category term="源码" scheme="https://www.ofcoder.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
